Texture2D shaderTexture;
SamplerState SampleType;

cbuffer LightBuffer
{
	float4 ambientColor;
    float4 diffuseColor;
    float3 lightDirection;
    float padding;
};

//--------------------------------------------------------------------------------------
struct VS_OUTPUT
{
    float4 Pos : SV_POSITION;
    float4 Color : COLOR0;
    float4 normal : NORMAL;
	float2 tex : TEXCOORD0;
};


//--------------------------------------------------------------------------------------
// Pixel Shader
//--------------------------------------------------------------------------------------
float4 PS( VS_OUTPUT input ) : SV_Target
{
    float3 lightDir;
    float lightIntensity;
    float4 color;
	float4 textureColor;
	float3 normal;
	
	float dot_normal = dot(input.normal,lightDirection);
	
	if(dot_normal >= 0)
	{
		normal = -input.normal;		
		
	}
	else
	{
		normal = input.normal;
	}
	
	// Sample the pixel color from the texture using the sampler at this texture coordinate location.
    textureColor = shaderTexture.Sample(SampleType, input.tex);
	
	 // Set the default output color to the ambient light value for all pixels.
    color = ambientColor;

	// Invert the light direction for calculations.
    lightDir = -lightDirection;
	
	 // Calculate the amount of light on this pixel.
    lightIntensity = saturate(dot(normal, lightDir));
	
	if(lightIntensity > 0.0f)
    {
        // Determine the final diffuse color based on the diffuse color and the amount of light intensity.
        color += (diffuseColor * lightIntensity);
    }
	
	// Saturate the final light color.
    color = saturate(color);
	
	// Multiply the texture pixel and the final diffuse color to get the final pixel color result.
    color = color * textureColor;

	
    return color;
}
